# weblogic puppet module 
# installs weblogic on linux and window based systems with 64 or 32 bits JDK
# just add the weblogic generic jar to the files folder of the wls module
#  
weblogic puppet module
  installs weblogic
  installs OSB with or without OEPE


  configure + starts nodemanager

  domain creation normal
  domain OSB creation

  start the AdminServer for configuration 

  apply bsu patch

  create File or JDBC Persistence Store

  create JMS Server
  create JMS Module
  create JMS subdeployment
  create JMS connection factory
  create JMS queue or topic

  create users with group

  create SAF agents 
  create SAF Remote Destinations
  create SAf imported Destinations
  create SAF objects

  create Foreign Servers
  create Foreign Servers entries

  run every wlst script with the flexible wlst define

# use it like this in site.pp



$defaultJDK     = '7u7'
$defaultFullJDK = 'jdk1.7.0_07'

# templates.pp
#

include jdk7
include wls




class wls1036osb{

  jdk7::install7{'jdk7_2':
    version => $defaultJDK,
    x64     => "true",
  }
 
  case $operatingsystem {
     centos, redhat, OracleLinux, ubuntu, debian: { 
       $osMdwHome    = "/opt/oracle/wls/wls11g"
       $osWlHome     = "/opt/oracle/wls/wls11g/wlserver_10.3"
       $osTemplate   = "osb"
       $osDomainPath = "/opt/oracle/wls/wls11g/admin"
       $user         = "oracle"
       $group        = "dba"
     }
     windows: { 
       $osMdwHome    = "c:/opt/oracle/wls/wls11g"
       $osWlHome     = "c:/oracle/wls/wls11g/wlserver_10.3"
       $osTemplate   = "osb"
       $osDomainPath = "c:/oracle/wls/wls11g/admin"
       $user         = "Administrator"
       $group        = "Administrators"
       $serviceName  = "C_oracle_wls_wls11g_wlserver_10.3"
     }
  }

  # set the defaults
  Wls::Installwls {
    version      => '1036',
    versionJdk   => $defaultJDK,
    user         => $user,
    group        => $group,    
  }

  Wls::Installosb {
    mdwHome      => $osMdwHome,
    wlHome       => $osWlHome,
    fullJDKName  => $defaultFullJDK,	
    user         => $user,
    group        => $group,    
  }

  Wls::Wlsdomain {
    wlHome       => $osWlHome,
    mdwHome      => $osMdwHome,
    fullJDKName  => $defaultFullJDK,	
    user         => $user,
    group        => $group,    
  }
  
  Wls::Nodemanager {
    wlHome       => $osWlHome,
    fullJDKName  => $defaultFullJDK,	
    user         => $user,
    group        => $group,
    serviceName  => $serviceName,  
  }
  

  # install
  wls::installwls{'11gPS5':
    require      => Jdk7::Install7['jdk7_2'],
  }

  wls::installosb{'osbPS5':
    osbFile      => 'ofm_osb_generic_11.1.1.6.0_disk1_1of1.zip',
    require      => Wls::Installwls['11gPS5'],
  }

  wls::bsupatch{'p13573621':
    mdwHome      => $osMdwHome ,
    wlHome       => $osWlHome,
    fullJDKName  => $defaultFullJDK,
    patchId      => 'KZKQ',	
    patchFile    => 'p13573621_1036_Generic.zip',	
    user         => $user,
    group        => $group, 
    require      => Wls::Installosb['osbPS5'],
  }


  #nodemanager configuration and starting
  wls::nodemanager{'nodemanager11g':
    listenPort  => '5656',
    require     => Wls::Installosb['osbPS5'],
  }

  # install OSB domain
  wls::wlsdomain{
  
    'osbDomain':
    wlsTemplate     => $osTemplate,
    domain          => 'osbDomain',
    domainPath      => $osDomainPath,
    adminListenPort => '9001',
    nodemanagerPort => '5656',
    require         => Wls::Nodemanager['nodemanager11g'];
    
  }


  # default parameters for the wlst scripts
  Wls::Wlstexec {
    wlHome       => $osWlHome,
    fullJDKName  => $defaultFullJDK,	
    user         => $user,
    group        => $group,
    address      => "localhost",
    wlsUser      => "weblogic",
    password     => "weblogic1",
  }
  
  # start AdminServers for configuration of both domains myTestDomain
  wls::wlstexec { 
  
    'startOSBAdminServer':
     script      => 'startWlsServer.py',
     port        => '5656',
     params      =>  ["domain = 'osbDomain'",
                      "domainPath = '${osDomainPath}/osbDomain'",
                      "wlsServer = 'AdminServer'"],
     require     => Wls::Wlsdomain['osbDomain'];

  }

  # create jdbc datasource for osb_server1 
  wls::wlstexec { 
  
    'createJdbcDatasourceHr':
     script      => 'createJdbcDatasource.py',
     port        => '9001',
     params      =>  ["dsName                      = 'hrDS'",
                      "jdbcDatasourceTargets       = 'AdminServer,osb_server1'",
                      "dsJNDIName                  = 'jdbc/hrDS'",
                      "dsDriverName                = 'oracle.jdbc.xa.client.OracleXADataSource'",
                      "dsURL                       = 'jdbc:oracle:thin:@master.alfa.local:1521/XE'",
                      "dsUserName                  = 'hr'",
                      "dsPassword                  = 'hr'",
                      "datasourceTargetType        = 'Server'",
                      "globalTransactionsProtocol  = 'xxxx'"
                      ],
     require     => Wls::Wlstexec['startOSBAdminServer'];

  }

  # create jdbc jms datasource for jms server 
  wls::wlstexec { 
  
    'createJdbcDatasourceJms':
     script      => 'createJdbcDatasource.py',
     port        => '9001',
     params      =>  ["dsName                      = 'jmsDS'",
                      "jdbcDatasourceTargets       = 'AdminServer,osb_server1'",
                      "dsJNDIName                  = 'jdbc/jmsDS'",
                      "dsDriverName                = 'oracle.jdbc.OracleDriver'",
                      "dsURL                       = 'jdbc:oracle:thin:@master.alfa.local:1521/XE'",
                      "dsUserName                  = 'jms'",
                      "dsPassword                  = 'jms'",
                      "datasourceTargetType        = 'Server'",
                      "globalTransactionsProtocol  = 'None'"
                      ],
     require     => Wls::Wlstexec['createJdbcDatasourceHr'];

  }

  # create jdbc persistence store for jmsmodule 
  wls::wlstexec { 
  
    'createJdbcPersistenceStoreOSBServer':
     script      => 'createJdbcPersistenceStore.py',
     port        => '9001',
     params      =>  ["jdbcStoreName = 'jmsModuleJdbcPersistence'",
                      "serverTarget  = 'osb_server1'",
                      "prefix        = 'jms1'",
                      "datasource    = 'jmsDS'"
                     
                      ],
     require     => Wls::Wlstexec['createJdbcDatasourceJms'];

  }


  # create file persistence store for osb_server1 
  wls::wlstexec { 
  
    'createFilePersistenceStoreOSBServer':
     script      => 'createFilePersistenceStore.py',
     port        => '9001',
     params      =>  ["fileStoreName = 'jmsModuleFilePersistence'",
                      "serverTarget  = 'osb_server1'"],
     require     => Wls::Wlstexec['createJdbcPersistenceStoreOSBServer'];

  }
  
  # create jms server for osb_server1 
  wls::wlstexec { 
  
    'createJmsServerOSBServer':
     script      => 'createJmsServer.py',
     port        => '9001',
     params      =>  ["storeName      = 'jmsModuleFilePersistence'",
                      "serverTarget   = 'osb_server1'",
                      "jmsServerName  = 'jmsServer'",
                      "storeType      = 'file'",
                      ],
     require     => Wls::Wlstexec['createFilePersistenceStoreOSBServer'];
  }

  # create jms server for osb_server1 
  wls::wlstexec { 
  
    'createJmsServerOSBServer2':
     script      => 'createJmsServer.py',
     port        => '9001',
     params      =>  ["storeName      = 'jmsModuleJdbcPersistence'",
                      "serverTarget   = 'osb_server1'",
                      "jmsServerName  = 'jmsServer2'",
                      "storeType      = 'jdbc'",
                      ],
     require     => Wls::Wlstexec['createJmsServerOSBServer'];
  }

  # create jms module for osb_server1 
  wls::wlstexec { 
  
    'createJmsModuleOSBServer':
     script      => 'createJmsModule.py',
     port        => '9001',
     params      =>  ["target         = 'osb_server1'",
                      "jmsModuleName  = 'jmsModule'",
                      "targetType     = 'Server'",
                      ],
     require     => Wls::Wlstexec['createJmsServerOSBServer2'];
  }


  # create jms subdeployment for jms module 
  wls::wlstexec { 
  
    'createJmsSubDeploymentWLSforJmsModule':
     script      => 'createJmsSubDeployment.py',
     port        => '9001',
     params      =>  ["target         = 'osb_server1'",
                      "jmsModuleName  = 'jmsModule'",
                      "subName        = 'wlsServer'",
                      "targetType     = 'Server'"
                      ],
     require     => Wls::Wlstexec['createJmsModuleOSBServer'];
  }


  # create jms subdeployment for jms module 
  wls::wlstexec { 
  
    'createJmsSubDeploymentWLSforJmsModule2':
     script      => 'createJmsSubDeployment.py',
     port        => '9001',
     params      =>  ["target         = 'jmsServer'",
                      "jmsModuleName  = 'jmsModule'",
                      "subName        = 'JmsServer'",
                      "targetType     = 'JMSServer'"
                      ],
     require     => Wls::Wlstexec['createJmsSubDeploymentWLSforJmsModule'];
  }

  # create jms connection factory for jms module 
  wls::wlstexec { 
  
    'createJmsConnectionFactoryforJmsModule':
     script      => 'createJmsConnectionFactory.py',
     port        => '9001',
     params      =>  ["subDeploymentName = 'wlsServer'",
                      "jmsModuleName     = 'jmsModule'",
                      "cfName            = 'cf'",
                      "cfJNDIName        = 'jms/cf'",
                      "transacted        = 'false'",
                      "timeout           = 'xxxx'"
                      ],
     require     => Wls::Wlstexec['createJmsSubDeploymentWLSforJmsModule2'];
  }


  # create jms error Queue for jms module 
  wls::wlstexec { 
  
    'createJmsErrorQueueforJmsModule':
     script      => 'createJmsQueueOrTopic.py',
     port        => '9001',
     params      =>  ["subDeploymentName = 'JmsServer'",
                      "jmsModuleName     = 'jmsModule'",
                      "jmsName           = 'ErrorQueue'",
                      "jmsJNDIName       = 'jms/ErrorQueue'",
                      "jmsType           = 'queue'",
                      "distributed       = 'false'",
                      "balancingPolicy   = 'xxxxx'",
                      "useRedirect       = 'false'",
                      "limit             = 'xxxxx'",
                      "policy            = 'xxxxx'",
                      "errorObject       = 'xxxxx'"
                      ],
     require     => Wls::Wlstexec['createJmsConnectionFactoryforJmsModule'];
  }

  # create jms Queue for jms module 
  wls::wlstexec { 
  
    'createJmsQueueforJmsModule':
     script      => 'createJmsQueueOrTopic.py',
     port        => '9001',
     params      =>  ["subDeploymentName   = 'JmsServer'",
                      "jmsModuleName       = 'jmsModule'",
                      "jmsName             = 'Queue1'",
                      "jmsJNDIName         = 'jms/Queue1'",
                      "jmsType             = 'queue'",
                      "distributed         = 'false'",
                      "balancingPolicy     = 'xxxxx'",
                      "useRedirect         = 'true'",
                      "limit               = '3'",
                      "policy              = 'Redirect'",
                      "errorObject         = 'ErrorQueue'"
                      ],
     require     => Wls::Wlstexec['createJmsErrorQueueforJmsModule'];
  }

  # create jms Topic for jms module 
  wls::wlstexec { 
  
    'createJmsTopicforJmsModule':
     script      => 'createJmsQueueOrTopic.py',
     port        => '9001',
     params      =>  ["subDeploymentName   = 'JmsServer'",
                      "jmsModuleName       = 'jmsModule'",
                      "jmsName             = 'Topic1'",
                      "jmsJNDIName         = 'jms/Topic1'",
                      "jmsType             = 'topic'",
                      "distributed         = 'false'",
                      "balancingPolicy     = 'xxxxx'",
                      "useRedirect         = 'false'",
                      "limit               = 'xxxxx'",
                      "policy              = 'xxxxx'",
                      "errorObject         = 'xxxxx'"
                      ],
     require     => Wls::Wlstexec['createJmsQueueforJmsModule'];
  }

  # create user and group 
  wls::wlstexec { 
  
    'createUserAndGroups':
     script      => 'createUsersAndGroups.py',
     port        => '9001',
     params      =>  ["userPassword   = 'Welcome01'",
                      "allUsers       = 'user1,user2'",
                      "group          = 'superuser'"
                      ],
     require     => Wls::Wlstexec['createJmsTopicforJmsModule'];
  }

  

}

class wls12{


  jdk7::install7{'jdk7':
    version => $defaultJDK,
    x64     => "true",
  }
  
  case $operatingsystem {
     centos, redhat, OracleLinux, ubuntu, debian: { 
       $osMdwHome    = "/opt/oracle/wls/wls12c"
       $osWlHome     = "/opt/oracle/wls/wls12c/wlserver_12.1"
       $osTemplate   = "standard"
       $osDomainPath = "/opt/oracle/wls/wls12c/admin"
       $user         = "oracle"
       $group        = "dba"
     }
     windows: { 
       $osMdwHome    = "c:/oracle/wls/wls12c"
       $osWlHome     = "c:/oracle/wls/wls12c/wlserver_12.1"
       $osTemplate   = "standard"
       $osDomainPath = "c:/oracle/wls/wls12c/admin"
       $user         = "Administrator"
       $group        = "Administrators"
       $serviceName  = "C_oracle_wls_wls12c_wlserver_12.1"
     }
  }

  # set the defaults
  Wls::Installwls {
    version      => '1211',
    versionJdk   => $defaultJDK,
    user         => $user,
    group        => $group,    
  }
  Wls::Wlsdomain {
    wlHome       => $osWlHome,
    mdwHome      => $osMdwHome,
    fullJDKName  => $defaultFullJDK,	
    user         => $user,
    group        => $group,    
  }
  Wls::Nodemanager {
    wlHome       => $osWlHome,
    fullJDKName  => $defaultFullJDK,	
    user         => $user,
    group        => $group,
    serviceName  => $serviceName,  
  }
  
  # install
  wls::installwls{'wls12c':
    require      => Jdk7::Install7['jdk7'],
  }

  #nodemanager configuration and starting
  wls::nodemanager{'nodemanager':
    require      => Wls::Installwls['wls12c'],
  }

  wls::wlsdomain{
  
    'testDomain':
    wlsTemplate  => $osTemplate,
    domain       => 'myTestDomain',
    domainPath   => $osDomainPath,
    require      => Wls::Nodemanager['nodemanager'];

    'testDomain2':
    wlsTemplate     => $osTemplate,
    domain          => 'myTestDomain2',
    domainPath      => $osDomainPath,
    adminListenPort => '8001',
    require         => Wls::Nodemanager['nodemanager'];
    
  }



  # default parameters for the wlst scripts
  Wls::Wlstexec {
    wlHome       => $osWlHome,
    fullJDKName  => $defaultFullJDK,	
    user         => $user,
    group        => $group,
    address      => "localhost",
    wlsUser      => "weblogic",
    password     => "weblogic1",
  }
  
  # start AdminServers for configuration of both domains myTestDomain
  wls::wlstexec { 
  
    'startAdminServer':
     script      => 'startWlsServer.py',
     port        => '5556',
     params      =>  ["domain     = 'testDomain'",
                      "domainPath = '${osDomainPath}/myTestDomain'",
                      "wlsServer  = 'AdminServer'"],
     require     => Wls::Wlsdomain['testDomain'];

    'startAdminServer2':
     script      => 'startWlsServer.py',
     port        => '5556',
     params      =>  ["domain     = 'myTestDomain2'",
                      "domainPath = '${osDomainPath}/myTestDomain2'",
                      "wlsServer  = 'AdminServer'"],
     require     => Wls::Wlsdomain['testDomain2'];

  }

} 