for more info see this amis blogpost
http://technology.amis.nl/2012/10/13/configure-fmw-servers-with-puppet/

for windows puppet agents it is necessary to install unxutils tools 
and put this on the c drive C:\unxutils

Also for registry support install this on the master, read this  
http://puppetlabs.com/blog/module-of-the-week-puppetlabs-registry-windows/
and install this on the puppet master
puppet module install puppetlabs/registry

Puppet modules

java jdk7 JAVA SE 6/7 puppet module, install java on win/ux servers 

weblogic puppet module

  WebLogic Facter , show middleware home + domains, running nodemanagers + weblogic servers

ora_inst_loc_data	/opt/oracle/orainventory
ora_inst_products	/opt/oracle/wls/wls11g/oracle_common;/opt/oracle/wls/wls11g/Oracle_OSB1;
ora_mdw_0	/opt/oracle/wls/wls11g
ora_mdw_0_domain_0	osbDomain
ora_mdw_0_domain_0_deployments	FMW Welcome Page Application#11.1.0.0.0;wsil-wls;
ora_mdw_0_domain_0_filestores	FileStore;WseeFileStore;jmsModuleFilePersistence;
ora_mdw_0_domain_0_jdbc	wlsbjmsrpDataSource;hrDS;jmsDS;
ora_mdw_0_domain_0_jdbcstores	jmsModuleJdbcPersistence;
ora_mdw_0_domain_0_jmsmodule_0_name	WseeJmsModule
ora_mdw_0_domain_0_jmsmodule_0_objects	WseeMessageQueue;WseeCallbackQueue;
ora_mdw_0_domain_0_jmsmodule_0_subdeployments	BEA_JMS_MODULE_SUBDEPLOYMENT_WSEEJMSServer;
ora_mdw_0_domain_0_jmsmodule_1_name	jmsResources
ora_mdw_0_domain_0_jmsmodule_1_objects	wli.reporting.jmsprovider.ConnectionFactory;
ora_mdw_0_domain_0_jmsmodule_1_subdeployments	weblogic.wlsb.jms.transporttask.QueueConnectionFactory;wlsbJMSServer;
ora_mdw_0_domain_0_jmsmodule_2_name	jmsModule
ora_mdw_0_domain_0_jmsmodule_2_objects	cf;ErrorQueue;Queue1;Topic1;
ora_mdw_0_domain_0_jmsmodule_2_subdeployments	wlsServer;JmsServer;
ora_mdw_0_domain_0_jmsmodule_cnt	3
ora_mdw_0_domain_0_jmsmodules	WseeJmsModule;jmsResources;jmsModule;
ora_mdw_0_domain_0_jmsservers	WseeJmsServer;jmsServer;jmsServer2;wlsbJMSServer;
ora_mdw_0_domain_0_libraries	oracle.bi.jbips#11.1.1@0.1;oracle.bi.composer#11.1.1@0.1;
ora_mdw_0_domain_0_safagents	jmsModuleJdbcPersistence;
ora_mdw_0_domain_0_server_0	AdminServer
ora_mdw_0_domain_0_server_0_machine	LocalMachine
ora_mdw_0_domain_0_server_0_port	9001
ora_mdw_0_domain_0_server_1	osb_server1
ora_mdw_0_domain_0_server_1_machine	LocalMachine
ora_mdw_0_domain_0_server_1_port	8011
ora_mdw_0_domain_cnt	1
ora_mdw_cnt	1
ora_mdw_homes	/opt/oracle/wls/wls11g
ora_node_mgr_0	pid: 4109 port: 5556
ora_wls_0	pid: 4204 name: AdminServer



  installs weblogic
  installs OSB with or without OEPE

  configure + starts nodemanager

  domain creation normal
  domain OSB creation

  start the AdminServer for configuration 

  apply bsu patch

  create File or JDBC Persistence Store

  create JMS Server
  create JMS Module
  create JMS subdeployment
  create JMS connection factory
  create JMS queue or topic

  create users with group

  create SAF agents 
  create SAF Remote Destinations
  create SAf imported Destinations
  create SAF objects

  create Foreign Servers
  create Foreign Servers entries

  run every wlst script with the flexible wlst define

ToDo: total weblogic configuration. Deployments 

#  java jdk7 JAVA SE 6/7 puppet module 
# installs jdk on linux based systems and window with 64 or 32 bits
# just add the jdk 6 or 7 files like jdk-6u35-linux-x64-rpm.bin, jdk-7u7-linux-x64.rpm, 
# jdk-7u7-windows-i586.exe or jdk-7u7-windows-x64.exe downloaded from Oracle website to 
# the files folder of jdk7 module
#
 
# weblogic puppet module 
# installs weblogic on linux window based systems with 64 or 32 bits JDK
# just add the weblogic generic jar to the files folder of the wls module
# use it like this in site.pp
#

# site.pp
#
 
import "templates"
import "nodes"

$defaultJDK     = '7u7'
$defaultFullJDK = 'jdk1.7.0_07'


# nodes.pp
#

node default {
}

node basenode {
}

node devel inherits basenode {
  $my_zone = "devel"
  include wls1036osb
}

node prod inherits basenode {
  $my_zone = "prod"
}

node 'devagent1.alfa.local' inherits devel {
}

node 'win7user.localdomain' inherits prod  {
  include wls12
} 

node 'hudson.alfa.local' {
  include hudson
} 


# templates.pp
#

include jdk7
include wls

class hudson{

  jdk7::install7{'jdk7_husdon':
    version => $defaultJDK,
    x64     => "true",
  }

  $osMdwHome    = "/opt/oracle/wls/wls11g"
  $osWlHome     = "/opt/oracle/wls/wls11g/wlserver_10.3"
  $osTemplate   = "osb"
  $osDomainPath = "/opt/oracle/wls/wls11g/admin"
  $user         = "oracle"
  $group        = "dba"

  $oepeFile     = "oepe-indigo-all-in-one-11.1.1.8.0.201110211138-linux-gtk-x86_64.zip"


  # set the defaults
  Wls::Installwls {
    version      => '1036',
    versionJdk   => $defaultJDK,
    user         => $user,
    group        => $group,    
  }


  Wls::Installosb {
    mdwHome      => $osMdwHome,
    wlHome       => $osWlHome,
    fullJDKName  => $defaultFullJDK,	
    user         => $user,
    group        => $group,    
  }

  # install
  wls::installwls{'11gPS5_hudson':
    require      => Jdk7::Install7['jdk7_husdon'],
  }


  # download oepe to hudson server
  if ! defined(File["/install/${oepeFile}"]) {
    file { "/install/${oepeFile}":
       source  => "puppet:///modules/wls/${oepeFile}",
       require => Wls::Installwls['11gPS5_hudson'],
       ensure  => present,
       mode    => 0775,
    }
  }

  # extract oepe in middleware home
  if ! defined(Exec["extract ${oepeFile}"]) {
     exec { "extract ${oepeFile}":
          command   => "unzip -n /install/${oepeFile} -d ${osMdwHome}/oepe11.1.1.8",
          require   => File["/install/${oepeFile}"],
          creates   => "${osMdwHome}/oepe11.1.1.8",
          path      => "/usr/local/bin:/bin:/usr/bin:/usr/local/sbin:/usr/sbin:/sbin:",
          user      => $user,
          group     => $group,
          logoutput => true,
         }
  }

  #install OSB with OEPE
  wls::installosb{'osbPS5_oepe':
    osbFile      => 'ofm_osb_generic_11.1.1.6.0_disk1_1of1.zip',
    oepeHome     => 'oepe11.1.1.8',
    require      => Exec["extract ${oepeFile}"],
  }


}



class wls1036osb{

  jdk7::install7{'jdk7_2':
    version => $defaultJDK,
    x64     => "true",
  }
 
  case $operatingsystem {
     centos, redhat, OracleLinux, ubuntu, debian: { 
       $osMdwHome    = "/opt/oracle/wls/wls11g"
       $osWlHome     = "/opt/oracle/wls/wls11g/wlserver_10.3"
       $osTemplate   = "osb"
       $osDomainPath = "/opt/oracle/wls/wls11g/admin"
       $user         = "oracle"
       $group        = "dba"
     }
     windows: { 
       $osMdwHome    = "c:/oracle/wls/wls11g"
       $osWlHome     = "c:/oracle/wls/wls11g/wlserver_10.3"
       $osTemplate   = "osb"
       $osDomainPath = "c:/oracle/wls/wls11g/admin"
       $user         = "Administrator"
       $group        = "Administrators"
       $serviceName  = "C_oracle_wls_wls11g_wlserver_10.3"
     }
  }

  # set the defaults
  Wls::Installwls {
    version      => '1036',
    versionJdk   => $defaultJDK,
    user         => $user,
    group        => $group,    
  }

  Wls::Installosb {
    mdwHome      => $osMdwHome,
    wlHome       => $osWlHome,
    fullJDKName  => $defaultFullJDK,	
    user         => $user,
    group        => $group,    
  }

  Wls::Wlsdomain {
    wlHome       => $osWlHome,
    mdwHome      => $osMdwHome,
    fullJDKName  => $defaultFullJDK,	
    user         => $user,
    group        => $group,    
  }
  
  Wls::Nodemanager {
    wlHome       => $osWlHome,
    fullJDKName  => $defaultFullJDK,	
    user         => $user,
    group        => $group,
    serviceName  => $serviceName,  
  }
  

  # install
  wls::installwls{'11gPS5':
    require      => Jdk7::Install7['jdk7_2'],
  }

  wls::installosb{'osbPS5':
    osbFile      => 'ofm_osb_generic_11.1.1.6.0_disk1_1of1.zip',
    require      => Wls::Installwls['11gPS5'],
  }

  wls::bsupatch{'p13573621':
    mdwHome      => $osMdwHome ,
    wlHome       => $osWlHome,
    fullJDKName  => $defaultFullJDK,
    patchId      => 'KZKQ',	
    patchFile    => 'p13573621_1036_Generic.zip',	
    user         => $user,
    group        => $group, 
    require      => Wls::Installosb['osbPS5'],
  }


  #nodemanager configuration and starting
  wls::nodemanager{'nodemanager11g':
    listenPort  => '5556',
    require     => Wls::Installosb['osbPS5'],
  }

  # install OSB domain
  wls::wlsdomain{
  
    'osbDomain':
    wlsTemplate     => $osTemplate,
    domain          => 'osbDomain',
    domainPath      => $osDomainPath,
    adminListenPort => '9001',
    nodemanagerPort => '5556',
    require         => Wls::Nodemanager['nodemanager11g'];
    
  }


  # default parameters for the wlst scripts
  Wls::Wlstexec {
    wlsDomain    => "${osDomainPath}/osbDomain",
    wlHome       => $osWlHome,
    fullJDKName  => $defaultFullJDK,	
    user         => $user,
    group        => $group,
    address      => "localhost",
    wlsUser      => "weblogic",
    password     => "weblogic1",
  }
  
  # start AdminServers for configuration of both domains myTestDomain
  wls::wlstexec { 
  
    'startOSBAdminServer':
     script      => 'startWlsServer.py',
     port        => '5556',
     params      =>  ["domain = 'osbDomain'",
                      "domainPath = '${osDomainPath}/osbDomain'",
                      "wlsServer = 'AdminServer'"],
     require     => Wls::Wlsdomain['osbDomain'];

  }

  # create jdbc datasource for osb_server1 
  wls::wlstexec { 
  
    'createJdbcDatasourceHr':
     wlstype       => "jdbc",
     wlsObjectName => "hrDS",
     script        => 'createJdbcDatasource.py',
     port          => '9001',
     params        => ["dsName                      = 'hrDS'",
                      "jdbcDatasourceTargets       = 'AdminServer,osb_server1'",
                      "dsJNDIName                  = 'jdbc/hrDS'",
                      "dsDriverName                = 'oracle.jdbc.xa.client.OracleXADataSource'",
                      "dsURL                       = 'jdbc:oracle:thin:@master.alfa.local:1521/XE'",
                      "dsUserName                  = 'hr'",
                      "dsPassword                  = 'hr'",
                      "datasourceTargetType        = 'Server'",
                      "globalTransactionsProtocol  = 'xxxx'"
                      ],
     require     => Wls::Wlstexec['startOSBAdminServer'];

  }

  # create jdbc jms datasource for jms server 
  wls::wlstexec { 
  
    'createJdbcDatasourceJms':
     wlstype       => "jdbc",
     wlsObjectName => "jmsDS",
     script        => 'createJdbcDatasource.py',
     port          => '9001',
     params        => ["dsName                      = 'jmsDS'",
                      "jdbcDatasourceTargets       = 'AdminServer,osb_server1'",
                      "dsJNDIName                  = 'jdbc/jmsDS'",
                      "dsDriverName                = 'oracle.jdbc.OracleDriver'",
                      "dsURL                       = 'jdbc:oracle:thin:@master.alfa.local:1521/XE'",
                      "dsUserName                  = 'jms'",
                      "dsPassword                  = 'jms'",
                      "datasourceTargetType        = 'Server'",
                      "globalTransactionsProtocol  = 'None'"
                      ],
     require     => Wls::Wlstexec['createJdbcDatasourceHr'];

  }

  # create jdbc persistence store for jmsmodule 
  wls::wlstexec { 
  
    'createJdbcPersistenceStoreOSBServer':
     wlstype       => "jdbcstore",
     wlsObjectName => "jmsModuleJdbcPersistence",
     script        => 'createJdbcPersistenceStore.py',
     port          => '9001',
     params        => ["jdbcStoreName = 'jmsModuleJdbcPersistence'",
                      "serverTarget  = 'osb_server1'",
                      "prefix        = 'jms1'",
                      "datasource    = 'jmsDS'"
                      ],
     require     => Wls::Wlstexec['createJdbcDatasourceJms'];

  }


  # create file persistence store for osb_server1 
  wls::wlstexec { 
    'createFilePersistenceStoreOSBServer':
     wlstype       => "filestore",
     wlsObjectName => "jmsModuleFilePersistence",
     script        => 'createFilePersistenceStore.py',
     port          => '9001',
     params        =>  ["fileStoreName = 'jmsModuleFilePersistence'",
                      "serverTarget  = 'osb_server1'"],
     require       => Wls::Wlstexec['createJdbcPersistenceStoreOSBServer'];

  }
  
  # create jms server for osb_server1 
  wls::wlstexec { 
  
    'createJmsServerOSBServer':
     wlstype       => "jmsserver",
     wlsObjectName => "jmsServer",
     script      => 'createJmsServer.py',
     port        => '9001',
     params      =>  ["storeName      = 'jmsModuleFilePersistence'",
                      "serverTarget   = 'osb_server1'",
                      "jmsServerName  = 'jmsServer'",
                      "storeType      = 'file'",
                      ],
     require     => Wls::Wlstexec['createFilePersistenceStoreOSBServer'];
  }

  # create jms server for osb_server1 
  wls::wlstexec { 
  
    'createJmsServerOSBServer2':
     wlstype       => "jmsserver",
     wlsObjectName => "jmsServer2",
     script      => 'createJmsServer.py',
     port        => '9001',
     params      =>  ["storeName      = 'jmsModuleJdbcPersistence'",
                      "serverTarget   = 'osb_server1'",
                      "jmsServerName  = 'jmsServer2'",
                      "storeType      = 'jdbc'",
                      ],
     require     => Wls::Wlstexec['createJmsServerOSBServer'];
  }

  # create jms module for osb_server1 
  wls::wlstexec { 
  
    'createJmsModuleOSBServer':
     wlstype       => "jmsmodule",
     wlsObjectName => "jmsModule",
     script      => 'createJmsModule.py',
     port        => '9001',
     params      =>  ["target         = 'osb_server1'",
                      "jmsModuleName  = 'jmsModule'",
                      "targetType     = 'Server'",
                      ],
     require     => Wls::Wlstexec['createJmsServerOSBServer2'];
  }


  # create jms subdeployment for jms module 
  wls::wlstexec { 
    'createJmsSubDeploymentWLSforJmsModule':
     wlstype       => "jmssubdeployment",
     wlsObjectName => "jmsModule/wlsServer",
     script        => 'createJmsSubDeployment.py',
     port          => '9001',
     params        => ["target         = 'osb_server1'",
                      "jmsModuleName  = 'jmsModule'",
                      "subName        = 'wlsServer'",
                      "targetType     = 'Server'"
                      ],
     require     => Wls::Wlstexec['createJmsModuleOSBServer'];
 }


  # create jms subdeployment for jms module 
  wls::wlstexec { 
    'createJmsSubDeploymentWLSforJmsModule2':
     wlstype       => "jmssubdeployment",
     wlsObjectName => "jmsModule/JmsServer",
     script      => 'createJmsSubDeployment.py',
     port        => '9001',
     params      =>  ["target         = 'jmsServer'",
                      "jmsModuleName  = 'jmsModule'",
                      "subName        = 'JmsServer'",
                      "targetType     = 'JMSServer'"
                      ],
     require     => Wls::Wlstexec['createJmsSubDeploymentWLSforJmsModule'];
  }

  # create jms connection factory for jms module 
  wls::wlstexec { 
  
    'createJmsConnectionFactoryforJmsModule':
     wlstype       => "jmsobject",
     wlsObjectName => "cf",
     script        => 'createJmsConnectionFactory.py',
     port          => '9001',
     params        => ["subDeploymentName = 'wlsServer'",
                      "jmsModuleName     = 'jmsModule'",
                      "cfName            = 'cf'",
                      "cfJNDIName        = 'jms/cf'",
                      "transacted        = 'false'",
                      "timeout           = 'xxxx'"
                      ],
     require     => Wls::Wlstexec['createJmsSubDeploymentWLSforJmsModule2'];
  }


  # create jms error Queue for jms module 
  wls::wlstexec { 
  
    'createJmsErrorQueueforJmsModule':
     wlstype       => "jmsobject",
     wlsObjectName => "ErrorQueue",
     script        => 'createJmsQueueOrTopic.py',
     port          => '9001',
     params        => ["subDeploymentName = 'JmsServer'",
                      "jmsModuleName     = 'jmsModule'",
                      "jmsName           = 'ErrorQueue'",
                      "jmsJNDIName       = 'jms/ErrorQueue'",
                      "jmsType           = 'queue'",
                      "distributed       = 'false'",
                      "balancingPolicy   = 'xxxxx'",
                      "useRedirect       = 'false'",
                      "limit             = 'xxxxx'",
                      "policy            = 'xxxxx'",
                      "errorObject       = 'xxxxx'"
                      ],
     require     => Wls::Wlstexec['createJmsConnectionFactoryforJmsModule'];
  }

  # create jms Queue for jms module 
  wls::wlstexec { 
  
    'createJmsQueueforJmsModule':
     wlstype       => "jmsobject",
     wlsObjectName => "Queue1",
     script        => 'createJmsQueueOrTopic.py',
     port          => '9001',
     params        => ["subDeploymentName   = 'JmsServer'",
                      "jmsModuleName       = 'jmsModule'",
                      "jmsName             = 'Queue1'",
                      "jmsJNDIName         = 'jms/Queue1'",
                      "jmsType             = 'queue'",
                      "distributed         = 'false'",
                      "balancingPolicy     = 'xxxxx'",
                      "useRedirect         = 'true'",
                      "limit               = '3'",
                      "policy              = 'Redirect'",
                      "errorObject         = 'ErrorQueue'"
                      ],
     require     => Wls::Wlstexec['createJmsErrorQueueforJmsModule'];
  }

  # create jms Topic for jms module 
  wls::wlstexec { 
    'createJmsTopicforJmsModule':
     wlstype       => "jmsobject",
     wlsObjectName => "Topic1",
     script        => 'createJmsQueueOrTopic.py',
     port          => '9001',
     params        => ["subDeploymentName   = 'JmsServer'",
                      "jmsModuleName       = 'jmsModule'",
                      "jmsName             = 'Topic1'",
                      "jmsJNDIName         = 'jms/Topic1'",
                      "jmsType             = 'topic'",
                      "distributed         = 'false'",
                      "balancingPolicy     = 'xxxxx'",
                      "useRedirect         = 'false'",
                      "limit               = 'xxxxx'",
                      "policy              = 'xxxxx'",
                      "errorObject         = 'xxxxx'"
                      ],
     require     => Wls::Wlstexec['createJmsQueueforJmsModule'];
  }

  # create user and group 
  wls::wlstexec { 
  
    'createUserAndGroups':
     script      => 'createUsersAndGroups.py',
     port        => '9001',
     params      =>  ["userPassword   = 'Welcome01'",
                      "allUsers       = 'user1,user2'",
                      "group          = 'superuser'"
                      ],
     require     => Wls::Wlstexec['createJmsTopicforJmsModule'];
  }

  

}

class wls12{


  jdk7::install7{'jdk7':
    version => $defaultJDK,
    x64     => "true",
  }
  
  case $operatingsystem {
     centos, redhat, OracleLinux, ubuntu, debian: { 
       $osMdwHome    = "/opt/oracle/wls/wls12c"
       $osWlHome     = "/opt/oracle/wls/wls12c/wlserver_12.1"
       $osTemplate   = "standard"
       $osDomainPath = "/opt/oracle/wls/wls12c/admin"
       $user         = "oracle"
       $group        = "dba"
     }
     windows: { 
       $osMdwHome    = "c:/oracle/wls/wls12c"
       $osWlHome     = "c:/oracle/wls/wls12c/wlserver_12.1"
       $osTemplate   = "standard"
       $osDomainPath = "c:/oracle/wls/wls12c/admin"
       $user         = "Administrator"
       $group        = "Administrators"
       $serviceName  = "C_oracle_wls_wls12c_wlserver_12.1"
     }
  }

  # set the defaults
  Wls::Installwls {
    version      => '1211',
    versionJdk   => $defaultJDK,
    user         => $user,
    group        => $group,    
  }
  Wls::Wlsdomain {
    wlHome       => $osWlHome,
    mdwHome      => $osMdwHome,
    fullJDKName  => $defaultFullJDK,	
    user         => $user,
    group        => $group,    
  }
  Wls::Nodemanager {
    wlHome       => $osWlHome,
    fullJDKName  => $defaultFullJDK,	
    user         => $user,
    group        => $group,
    serviceName  => $serviceName,  
  }
  
  # install
  wls::installwls{'wls12c':
    require      => Jdk7::Install7['jdk7'],
  }

  #nodemanager configuration and starting
  wls::nodemanager{'nodemanager':
    require      => Wls::Installwls['wls12c'],
  }

  wls::wlsdomain{
  
    'testDomain':
    wlsTemplate  => $osTemplate,
    domain       => 'myTestDomain',
    domainPath   => $osDomainPath,
    require      => Wls::Nodemanager['nodemanager'];

    'testDomain2':
    wlsTemplate     => $osTemplate,
    domain          => 'myTestDomain2',
    domainPath      => $osDomainPath,
    adminListenPort => '8001',
    require         => Wls::Nodemanager['nodemanager'];
    
  }


} 